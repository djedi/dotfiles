#!/usr/bin/env zsh

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `oa <app nam>` opens an app from cli
function oa() {
	echo "Opening \"$*\""
	open -a "$*"
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function restart-bluetooth {
	sudo launchctl stop com.apple.blued
	sudo launchctl start com.apple.blued
}

# Quit an application
function quit {
	local SCRIPT="quit app \"$@\""
	echo "Quiting app \"$@\""
	osascript -e $SCRIPT
}

# Close and re-open an app
function reopen() {
	quit "$*"
	sleep 1
	oa "$*"
}

# rsync backup with progress (must have rsync v3 or higher)
function backup() {
	rsync -au --info=progress2 $@
}

# Make a new executable file
function exe() {
	touch $@
	chmod +x $@
}

# Brew uninstall with zap
function zap {
	brew uninstall --zap $@
}

# Install brew cli formulae
function install_cli {
	brew tap teamookla/speedtest
	brew tap homebrew-ffmpeg/ffmpeg

	# CLI packages
	for pkg in $(cat ~/.apps_brew_cli.txt | grep -oE '^[^#]+'); do
		brew install ${pkg}
	done

	brew install homebrew-ffmpeg/ffmpeg/ffmpeg --with-fdk-aac
}

# Install GUI apps
function install_apps {
	for app in $(cat ~/.apps_brew_cask.txt | grep -oE '^[^#]+'); do
		brew install --cask ${app}
	done

	# Install from mac app store
	for app_id in $(cat .apps_app_store.txt | grep -oE '^[0-9]+') ; do
		mas install ${app_id}
	done
}

# favorite games
function install_games {
	for app in $(cat ~/.apps_brew_games.txt) ; do
		brew install --cask ${app}
	done
}
function uninstall_games {
	for app in $(cat ~/.apps_brew_games.txt) ; do
		echo "uninstalling ${app}"
		brew uninstall --cask --zap ${app}
	done
}

function cleanup {
	trash ~/Downloads/*
	trash -e
}

# Kill -9 apps with name containting string
function premurder {
	ps aux | rg -i $@
}
function murder {
	kill -9 $(ps aux | rg -i $@ | awk '{ print $2 }')
}

# Don't require password for sudo
function nopasswordsudo {
	sudo grep -qxF "$USER ALL=(ALL) NOPASSWD: ALL" /etc/sudoers || echo "$USER ALL=(ALL) NOPASSWD: ALL" | sudo EDITOR='tee -a' visudo
}
